version: 0.2

phases:
  install:
    commands:
      # Fetch the unique SHA for tagging Docker images
      - SHA=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION)

      # Fetch Secrets
      - AWS_ACCOUNT_ID=$(aws ssm get-parameter --name "/lambda/aws_account_id" --with-decryption --query "Parameter.Value" --output text)
      - ECR_REGION=$(aws ssm get-parameter --name "/lambda/ecr_region" --with-decryption --query "Parameter.Value" --output text)
      - ECR_REPO=$(aws ssm get-parameter --name "/lambda/ecr_repo" --with-decryption --query "Parameter.Value" --output text)
      - LAMBDA_FUNCTION_NAME=$(aws ssm get-parameter --name "/lambda/function_name" --with-decryption --query "Parameter.Value" --output text)
      - IAM_ROLE_ARN=$(aws ssm get-parameter --name "/lambda/iam_role_arn" --with-decryption --query "Parameter.Value" --output text)


  pre_build:
    commands:
      - echo Logging in to Amazon ECR...
      - aws ecr get-login-password --region $ECR_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$ECR_REGION.amazonaws.com

  build:
    commands:
      - echo Build started for commit $SHA
      - echo Building the Docker image...
      - docker build -t $ECR_REPO:$SHA .
      - docker tag $ECR_REPO:$SHA $AWS_ACCOUNT_ID.dkr.ecr.$ECR_REGION.amazonaws.com/$ECR_REPO:$SHA

  post_build:
    commands:
      - echo Build completed for commit $SHA
      - echo Pushing the Docker image to ECR...
      - docker push $AWS_ACCOUNT_ID.dkr.ecr.$ECR_REGION.amazonaws.com/$ECR_REPO:$SHA

      # Check if the Lambda function exists to update or create it
      - echo "Running the custom shell script..."
      - chmod +x scripts/create_or_update_lambda_function.sh   # Ensure the script is executable
      - ./scripts/create_or_update_lambda_function.sh $AWS_ACCOUNT_ID $ECR_REGION $ECR_REPO $LAMBDA_FUNCTION_NAME $IAM_ROLE_ARN $SHA
